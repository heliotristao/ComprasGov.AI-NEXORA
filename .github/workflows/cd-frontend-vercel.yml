name: CD Frontend - Vercel

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.mjs'
      - 'vercel.json'
      - 'tsconfig.json'
      - 'tailwind.config.js'
      - 'postcss.config.mjs'
      - 'components.json'

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && secrets.VERCEL_TOKEN != '' && secrets.VERCEL_PROJECT_ID != '' && secrets.VERCEL_ORG_ID != '' }}
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment configuration
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: vercel pull --yes --environment=production --token ${{ secrets.VERCEL_TOKEN }}

      - name: Configure API base URL
        run: |
          if [ -z "${{ secrets.NEXT_PUBLIC_API_URL }}" ]; then
            echo "NEXT_PUBLIC_API_URL secret is not configured." >&2
            exit 1
          fi
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> $GITHUB_ENV

      - name: Build with Vercel CLI
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: vercel build --prod --token ${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          set -euo pipefail
          DEPLOY_RESPONSE=$(vercel deploy --prebuilt --prod --token ${{ secrets.VERCEL_TOKEN }} --yes --json)
          export DEPLOY_RESPONSE
          DEPLOY_URL=$(python3 <<'PY'
import json
import os

response = json.loads(os.environ["DEPLOY_RESPONSE"])
print(response.get("url", ""))
PY
)
          if [ -z "$DEPLOY_URL" ]; then
            echo "Failed to parse deployment URL" >&2
            exit 1
          fi
          echo "url=https://$DEPLOY_URL" >> "$GITHUB_OUTPUT"
