from fastapi.testclient import TestClient
from sqlalchemy.orm import Session
from app.db.models.etp import ETP
from app.core import config
import uuid

def create_test_etp(db: Session, data: dict) -> ETP:
    etp = ETP(id=uuid.uuid4(), title="Test ETP", data=data, created_by="test_user")
    db.add(etp)
    db.commit()
    db.refresh(etp)
    return etp

def test_validate_etp_with_errors(client: TestClient, db: Session, normal_user_token_headers: dict):
    etp_data = {
        "tipo_contratacao": "TIC",
        "vinculacao_plano_tic": "",
        "valor_total_estimado": "100.00",
        "itens": [
            {"valor_unitario": "50.00", "quantidade": "1"}
        ]
    }
    etp = create_test_etp(db, etp_data)
    response = client.post(f"{config.API_V1_STR}/etp/{etp.id}/validate", headers=normal_user_token_headers)
    assert response.status_code == 200
    report = response.json()
    assert len(report["errors"]) == 2
    assert report["errors"][0]["field"] == "vinculacao_plano_tic"
    assert report["errors"][1]["field"] == "valor_total_estimado"

def test_validate_etp_with_warnings(client: TestClient, db: Session, normal_user_token_headers: dict):
    etp_data = {
        "justificativa_contratacao": "Short justification"
    }
    etp = create_test_etp(db, etp_data)
    response = client.post(f"{config.API_V1_STR}/etp/{etp.id}/validate", headers=normal_user_token_headers)
    assert response.status_code == 200
    report = response.json()
    assert len(report["warnings"]) == 1
    assert report["warnings"][0]["field"] == "justificativa_contratacao"

def test_validate_etp_valid(client: TestClient, db: Session, normal_user_token_headers: dict):
    etp_data = {
        "tipo_contratacao": "Outro",
        "valor_total_estimado": "100.00",
        "itens": [
            {"valor_unitario": "50.00", "quantidade": "2"}
        ],
        "justificativa_contratacao": "This is a very long and detailed justification for the contract, exceeding the two hundred character limit to ensure that no warnings are generated by the compliance engine. This is just some extra text to make sure that the justification is long enough."
    }
    etp = create_test_etp(db, etp_data)
    response = client.post(f"{config.API_V1_STR}/etp/{etp.id}/validate", headers=normal_user_token_headers)
    assert response.status_code == 200
    report = response.json()
    assert len(report["errors"]) == 0
    assert len(report["warnings"]) == 0
    assert len(report["suggestions"]) == 0
